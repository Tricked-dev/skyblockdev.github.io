{"version":3,"file":"static/chunks/pages/[lang]/aethor/[commands]-9b7369b7e3a84144.js","mappings":"qFACKA,OAAOC,SAAWD,OAAOC,UAAY,IAAIC,KAAK,CAC7C,4BACA,WACE,OAAO,EAAQ,U,6JCwGvB,UAnGsE,SAAQ,G,IAALC,EAAQ,EAARA,SAAUC,EAAU,EAAVA,WACjF,OAAM,SACHC,EAAAA,EAAS,C,oBACPC,EAAAA,GAAI,C,qBACFC,EAAAA,GAAG,CAACC,OAAO,O,oBACTC,EAAAA,GAAU,CAACC,QAAS,EAAGF,OAAO,O,SAC5BJ,EAAWO,KAAI,SAACC,EAAGC,GAClB,MAAS,IAALD,GAAe,yBACb,SACHE,EAAAA,GAAQ,C,mBACNC,EAAAA,QAAI,CAACC,KAAO,WAAY,OAAFJ,GAAKK,UAAQ,E,mBACjCC,EAAAA,GAAM,C,SAAEN,OAFEC,S,SAQpBM,EAAAA,GAAM,Q,SAERZ,EAAAA,GAAG,CAACa,KAAK,QAAQC,MAAM,O,mBACrBC,EAAAA,GAAS,CAACC,aAAW,EAACF,MAAM,O,SAC1BlB,EAASQ,KAAI,SAACC,EAAGC,G,IAaPD,EAZT,OAAM,UACHY,EAAAA,GAAa,C,oBACXC,KAAE,C,oBACAC,EAAAA,GAAe,C,oBACbnB,EAAAA,GAAG,CAACoB,KAAK,IAAIC,UAAU,O,SACrBC,MAAMC,QAAQlB,EAAEmB,GAAKnB,EAAEmB,EAAEC,KAAK,KAAOpB,EAAEmB,K,SAEzCE,EAAAA,GAAa,U,UAGjBC,EAAAA,GAAc,CAACC,GAAI,E,oBACjB5B,EAAAA,GAAG,C,SACE,QAAHK,EAAAA,EAAEwB,SAAFxB,IAAAA,OAAAA,EAAAA,EAAKD,KAAI,SAAC0B,EAAGxB,GACZ,OAAM,SACHyB,EAAAA,GAAG,CAASC,MAAM,U,SAChBV,MAAMC,QAAQlB,EAAEmB,GAAM,GAAYM,OAAVzB,EAAEmB,EAAE,GAAG,KAAK,OAAFM,GAAMA,GADjCxB,S,UAMfN,EAAAA,GAAG,C,oBACDiC,EAAAA,GAAI,C,SAAC,Y,SACLC,EAAAA,GAAI,C,SAAE7B,EAAE8B,Q,SAEVnC,EAAAA,GAAG,C,mBACDiC,EAAAA,GAAI,C,SAAE5B,EAAE+B,WAxBK9B,kB","sources":["webpack://_N_E/?8d57","webpack://_N_E/./pages/[lang]/aethor/[commands].tsx"],"sourcesContent":["\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/[lang]/aethor/[commands]\",\n      function () {\n        return require(\"private-next-pages/[lang]/aethor/[commands].tsx\");\n      }\n    ]);\n    if(module.hot) {\n      module.hot.dispose(function () {\n        window.__NEXT_P.push([\"/[lang]/aethor/[commands]\"])\n      });\n    }\n  ","import type { NextPage } from \"next\";\nimport Commands from \"../../../data/commands.json\";\nimport Container from \"^components/aethainer\";\nimport { Flex, Button, Accordion, AccordionItem, AccordionPanel, AccordionButton, Box, AccordionIcon, Tag, Text, Code, SimpleGrid, GridItem, Spacer } from \"@chakra-ui/react\";\nimport Link from \"next/link\";\nimport { getAllLanguageSlugs, getLanguage } from \"^api/lang\";\n\n// type Categories = keyOf Commands;\n\nconst Home: NextPage<{ commands: Command[]; categories: string[] }> = ({ commands, categories }) => {\n  return (\n    <Container>\n      <Flex>\n        <Box height=\"100%\">\n          <SimpleGrid columns={1} height=\"auto\">\n            {categories.map((x, y) => {\n              if (x == \"\") return <></>;\n              return (\n                <GridItem key={y}>\n                  <Link href={`/aethor/${x}`} passHref>\n                    <Button>{x}</Button>\n                  </Link>\n                </GridItem>\n              );\n            })}\n          </SimpleGrid>\n          <Spacer />\n        </Box>\n        <Box maxW=\"50rem\" width=\"100%\">\n          <Accordion allowToggle width=\"100%\">\n            {commands.map((x, y) => {\n              return (\n                <AccordionItem key={y}>\n                  <h2>\n                    <AccordionButton>\n                      <Box flex=\"1\" textAlign=\"left\">\n                        {Array.isArray(x.n) ? x.n.join(\" \") : x.n}\n                      </Box>\n                      <AccordionIcon />\n                    </AccordionButton>\n                  </h2>\n                  <AccordionPanel pb={4}>\n                    <Box>\n                      {x.a?.map((k, y) => {\n                        return (\n                          <Tag key={y} color=\"teal.50\">\n                            {Array.isArray(x.n) ? `${x.n[0]} ${k}` : k}\n                          </Tag>\n                        );\n                      })}\n                    </Box>\n                    <Box>\n                      <Text>Syntax</Text>\n                      <Code>{x.s}</Code>\n                    </Box>\n                    <Box>\n                      <Text>{x.d}</Text>\n                    </Box>\n                  </AccordionPanel>\n                </AccordionItem>\n              );\n            })}\n          </Accordion>\n        </Box>\n      </Flex>\n    </Container>\n  );\n};\n\ninterface Command {\n  //NAME\n  n: string | string[];\n  //DESCRIPTION\n  d: string;\n  //SYNTAX\n  s: string;\n  //ALIASES\n  a: string[];\n}\n\nexport async function getStaticProps(context: any) {\n  const language = getLanguage(context.params.lang);\n  let commands: Command[] =\n    //@ts-ignore -\n    Commands[context.params.commands] || Commands.general;\n  return {\n    props: { commands, categories: Object.keys(Commands), language },\n  };\n}\n\nexport async function getStaticPaths() {\n  let paths = [...Object.keys(Commands), \"index\", \"commands\"].map((x) => ({\n    params: { commands: x },\n  }));\n  const langs = getAllLanguageSlugs();\n\n  let newPaths = [];\n  for (let path of paths) {\n    for (let lang of langs) {\n      newPaths.push({ params: { ...path.params, ...lang.params } });\n    }\n  }\n  return {\n    paths: newPaths,\n    fallback: false,\n  };\n}\n\nexport default Home;\n"],"names":["window","__NEXT_P","push","commands","categories","Container","Flex","Box","height","SimpleGrid","columns","map","x","y","GridItem","Link","href","passHref","Button","Spacer","maxW","width","Accordion","allowToggle","AccordionItem","h2","AccordionButton","flex","textAlign","Array","isArray","n","join","AccordionIcon","AccordionPanel","pb","a","k","Tag","color","Text","Code","s","d"],"sourceRoot":""}